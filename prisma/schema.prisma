generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id          Int             @id @default(autoincrement())
  name        String
  country     String?
  slug        String          @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  matchesHome Match[]         @relation("HomeTeam")
  matchesAway Match[]         @relation("AwayTeam")
  eloRatings  EloRating[]
  xgRollings  XgTeamRolling[]
  injuries    InjuryReport[]
}

model Match {
  id              Int      @id @default(autoincrement())
  extId           String?  @unique
  competitionName String?  @map("competition")
  venue           String?
  startsAt        DateTime
  status          String   @default("scheduled")

  homeTeamId Int
  awayTeamId Int
  homeTeam   Team @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam   Team @relation("AwayTeam", fields: [awayTeamId], references: [id])

  odds           Odds[]
  weather        WeatherSnapshot?
  decisions      DecisionLog[]
  fixtureChanges FixtureChangeLog[] @relation("MatchFixtureChanges")

  competitionId Int?
  seasonId      Int?
  roundId       Int?
  competition   Competition? @relation("CompetitionMatches", fields: [competitionId], references: [id])
  season        Season?      @relation(fields: [seasonId], references: [id])
  round         Round?       @relation(fields: [roundId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([seasonId, homeTeamId, awayTeamId, startsAt])
  @@index([homeTeamId, startsAt])
  @@index([awayTeamId, startsAt])
  @@index([competitionId, seasonId, roundId])
  @@index([startsAt])
}

model Odds {
  id        Int      @id @default(autoincrement())
  matchId   Int
  book      String
  o1        Float // Home win
  oX        Float // Draw
  o2        Float // Away win
  sampledAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id])

  @@index([matchId, book, sampledAt])
}

model EloRating {
  id      Int      @id @default(autoincrement())
  teamId  Int
  rating  Int
  source  String // e.g., "clubelo"
  ratedAt DateTime @default(now())
  team    Team     @relation(fields: [teamId], references: [id])

  @@index([teamId, ratedAt])
}

model XgTeamRolling {
  id        Int      @id @default(autoincrement())
  teamId    Int
  span      String // e.g., "5m" or "10m"
  xgFor     Float
  xgAgainst Float
  updatedAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, span])
}

model InjuryReport {
  id         Int      @id @default(autoincrement())
  teamId     Int
  player     String
  status     String // out | doubt | fit
  reportedAt DateTime @default(now())
  source     String?
  team       Team     @relation(fields: [teamId], references: [id])

  @@index([teamId, reportedAt])
}

model WeatherSnapshot {
  id        Int      @id @default(autoincrement())
  matchId   Int      @unique
  tempC     Float?
  windKph   Float?
  precipMm  Float?
  updatedAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id])
}

model DecisionLog {
  id        Int      @id @default(autoincrement())
  matchId   Int
  payload   Json
  createdAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id])

  @@index([matchId, createdAt])
}

// --- Enums
enum CompetitionType {
  league
  cup
  europe
}

enum ChangeType {
  reschedule
  postpone
  cancel
  venue
}

// --- Nouvelles tables
model Competition {
  id        Int             @id @default(autoincrement())
  name      String
  code      String?
  country   String?
  type      CompetitionType
  organizer String?
  createdAt DateTime        @default(now())

  // üîÅ relations oppos√©es nomm√©es
  seasons Season[] @relation("CompetitionSeasons")
  matches Match[]  @relation("CompetitionMatches")
}

model Season {
  id            Int       @id @default(autoincrement())
  competitionId Int
  label         String
  startDate     DateTime?
  endDate       DateTime?

  competition Competition @relation("CompetitionSeasons", fields: [competitionId], references: [id])
  rounds      Round[]
  matches     Match[]

  @@index([competitionId])
}

model Round {
  id        Int       @id @default(autoincrement())
  seasonId  Int
  name      String // "Matchday 3", "Quarterfinal"
  roundNo   Int?
  stage     String? // "Group A", "R16"
  leg       Int? // 1/2
  startDate DateTime?
  endDate   DateTime?
  season    Season    @relation(fields: [seasonId], references: [id])
  matches   Match[]

  @@unique([seasonId, name, leg])
  @@index([seasonId])
}

model FixtureChangeLog {
  id           Int        @id @default(autoincrement())
  matchId      Int
  changeType   ChangeType
  prevStartsAt DateTime?
  newStartsAt  DateTime?
  prevVenue    String?
  newVenue     String?
  reason       String?
  sourceUrl    String?
  createdAt    DateTime   @default(now())

  // üîó relation nomm√©e vers Match
  match Match @relation("MatchFixtureChanges", fields: [matchId], references: [id])

  @@index([matchId, createdAt])
}
