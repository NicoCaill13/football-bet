generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompetitionType {
  league
  cup
  europe
}

enum ChangeType {
  reschedule
  postpone
  cancel
  venue
}

model Competition {
  id        Int             @id @default(autoincrement())
  name      String
  code      String?         @unique
  country   String?
  type      CompetitionType
  organizer String?
  createdAt DateTime        @default(now())

  seasons Season[] @relation("CompetitionSeasons")
  matches Match[]  @relation("CompetitionMatches")

  // API-FOOTBALL
  afLeagueId Int? @unique
}

model Season {
  id            Int         @id @default(autoincrement())
  competitionId Int
  label         String
  startDate     DateTime?
  endDate       DateTime?
  competition   Competition @relation("CompetitionSeasons", fields: [competitionId], references: [id])
  rounds        Round[]
  matches       Match[]

  // API-FOOTBALL
  afSeasonYear Int?

  @@index([competitionId])
}

model Round {
  id       Int     @id @default(autoincrement())
  seasonId Int
  name     String
  roundNo  Int?
  leg      Int? // null pour championnat
  season   Season  @relation(fields: [seasonId], references: [id])
  matches  Match[]

  @@unique([seasonId, name, leg])
}

model Team {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  name      String
  country   String?
  createdAt DateTime @default(now())

  // API-FOOTBALL
  afTeamId    Int?            @unique
  homeMatches Match[]         @relation("HomeTeam")
  awayMatches Match[]         @relation("AwayTeam")
  eloRatings  EloRating[]
  xgRollings  XgTeamRolling[]
  injuries    InjuryReport[]

  // relations implicites via Match.homeTeam/awayTeam
}

model Match {
  id              Int      @id @default(autoincrement())
  extId           String?  @unique
  competitionName String?  @map("competition")
  startsAt        DateTime
  status          String   @default("scheduled")
  venue           String?

  // Relations
  competitionId Int?
  competition   Competition? @relation("CompetitionMatches", fields: [competitionId], references: [id])

  seasonId Int?
  season   Season? @relation(fields: [seasonId], references: [id])

  roundId Int?
  round   Round? @relation(fields: [roundId], references: [id])

  homeTeamId Int
  homeTeam   Team @relation("HomeTeam", fields: [homeTeamId], references: [id])

  awayTeamId Int
  awayTeam   Team @relation("AwayTeam", fields: [awayTeamId], references: [id])

  afFixtureId Int? @unique

  odds            Odds[]
  decisionLogs    DecisionLog[]      @relation("MatchDecisionLogs")
  fixtureChanges  FixtureChangeLog[] @relation("MatchFixtureChanges")
  WeatherSnapshot WeatherSnapshot?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startsAt])
  @@index([homeTeamId, startsAt])
  @@index([awayTeamId, startsAt])
  @@index([competitionId, seasonId, roundId])
}

model Odds {
  id        Int      @id @default(autoincrement())
  matchId   Int
  book      String
  o1        Float
  oX        Float
  o2        Float
  sampledAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id])

  @@index([matchId, sampledAt])
}

model DecisionLog {
  id        Int      @id @default(autoincrement())
  matchId   Int
  payload   Json
  createdAt DateTime @default(now())
  match     Match    @relation("MatchDecisionLogs", fields: [matchId], references: [id])

  @@index([matchId, createdAt])
}

model FixtureChangeLog {
  id        Int       @id @default(autoincrement())
  matchId   Int
  type      String
  from      DateTime?
  to        DateTime?
  note      String?
  createdAt DateTime  @default(now())
  match     Match     @relation("MatchFixtureChanges", fields: [matchId], references: [id])

  @@index([matchId, createdAt])
}

model EloRating {
  id      Int      @id @default(autoincrement())
  teamId  Int
  rating  Int
  source  String // e.g., "clubelo"
  ratedAt DateTime @default(now())
  team    Team     @relation(fields: [teamId], references: [id])

  @@index([teamId, ratedAt])
}

model XgTeamRolling {
  id        Int      @id @default(autoincrement())
  teamId    Int
  span      String // e.g., "5m" or "10m"
  xgFor     Float
  xgAgainst Float
  updatedAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, span])
}

model InjuryReport {
  id         Int      @id @default(autoincrement())
  teamId     Int
  player     String
  status     String // out | doubt | fit
  reportedAt DateTime @default(now())
  source     String?
  team       Team     @relation(fields: [teamId], references: [id])

  @@index([teamId, reportedAt])
}

model WeatherSnapshot {
  id        Int      @id @default(autoincrement())
  matchId   Int      @unique
  tempC     Float?
  windKph   Float?
  precipMm  Float?
  updatedAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id])
}
